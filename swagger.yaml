swagger: '2.0'
info:
  title: Sunrise API
  description: API for managing school endpoints in Sunrise
  version: 1.0.0
host: localhost:5000
basePath: /api
schemes:
  - http
paths:
  /users:
    post:
      summary: Create a new user
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/User'
      responses:
        201:
          description: User created successfully
        400:
          description: Invalid input
    get:
      summary: Get all users
      responses:
        200:
          description: A list of users
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        404:
          description: No users found
  /users/{user_id}:
    get:
      summary: Get a user by ID
      parameters:
        - in: path
          name: user_id
          type: string
          required: true
          description: The ID of the user
      responses:
        200:
          description: A user
          schema:
            $ref: '#/definitions/User'
        404:
          description: User not found
    put:
      summary: Update a user by ID
      parameters:
        - in: path
          name: user_id
          type: string
          required: true
          description: The ID of the user
        - in: body
          name: body
          schema:
            $ref: '#/definitions/User'
      responses:
        200:
          description: User updated successfully
        404:
          description: User not found
        500:
          description: User update failed
    delete:
      summary: Delete a user by ID
      parameters:
        - in: path
          name: user_id
          type: string
          required: true
          description: The ID of the user
      responses:
        200:
          description: User deleted successfully
        404:
          description: User not found or delete failed

  # Product paths
  /products:
    post:
      summary: Add a new Product
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/Product'
      responses:
        201:
          description: Product added successfully
        400:
          description: Invalid input
    get:
      summary: Get all products
      responses:
        200:
          description: A list of all products
          schema:
            type: array
            items:
              $ref: '#/definitions/Product'
        404:
          description: No product found
  /products/{product_id}:
    get:
      summary: Get a product by ID
      parameters:
        - in: path
          name: product_id
          type: string
          required: true
          description: The ID of the product
      responses:
        200:
          description: A product
          schema:
            $ref: '#/definitions/Product'
        404:
          description: Product not found
    put:
      summary: Update the product by ID
      parameters:
        - in: path
          name: product_id
          type: string
          required: true
          description: The ID of the product
        - in: body
          name: body
          schema:
            $ref: '#/definitions/Product'
      responses:
        200:
          description: Product updated successfully
        404:
          description: Product not found
        500:
          description: Product update failed
    delete:
      summary: Delete the  product by ID
      parameters:
        - in: path
          name: product_id
          type: string
          required: true
          description: The ID of the product
      responses:
        200:
          description: product deleted successfully
        404:
          description: product not found or delete failed

  # Product_Detail

  /productDetail:
    post:
      summary: Add a new productDetail
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/ProductDetail'
      responses:
        201:
          description: Product detail added successfully
        400:
          description: Invalid input
    get:
      summary: Get all products Detail
      responses:
        200:
          description: A list of all products detail
          schema:
            type: array
            items:
              $ref: '#/definitions/ProductDetail'
        404:
          description: No product found
  /productDetail/{product_id}:
    get:
      summary: Get a product by ID
      parameters:
        - in: path
          name: product_id
          type: string
          required: true
          description: The ID of the product
      responses:
        200:
          description: A product
          schema:
            $ref: '#/definitions/ProductDetail'
        404:
          description: Product not found
    put:
      summary: Update the product by ID
      parameters:
        - in: path
          name: product_id
          type: string
          required: true
          description: The ID of the product
        - in: body
          name: body
          schema:
            $ref: '#/definitions/ProductDetail'
      responses:
        200:
          description: ProductDetail updated successfully
        404:
          description: ProductDetail not found
        500:
          description: ProductDetail update failed
    delete:
      summary: Delete the  ProductDetail by ID
      parameters:
        - in: path
          name: product_id
          type: string
          required: true
          description: The ID of the ProductDetail
      responses:
        200:
          description: ProductDetail deleted successfully
        404:
          description: ProductDetail not found or delete failed

  # ****************************************************

  /teachers:
    post:
      summary: Create a new teacher
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/Teacher'
      responses:
        201:
          description: Teacher created successfully
        400:
          description: Invalid input
    get:
      summary: Get all teachers
      responses:
        200:
          description: A list of teachers
          schema:
            type: array
            items:
              $ref: '#/definitions/Teacher'
        404:
          description: No teachers found

  /teachers/{teacher_id}:
    get:
      summary: Get a teacher by ID
      parameters:
        - in: path
          name: teacher_id
          type: string
          required: true
          description: The ID of the teacher
      responses:
        200:
          description: A teacher
          schema:
            $ref: '#/definitions/Teacher'
        404:
          description: Teacher not found
    put:
      summary: Update a teacher by ID
      parameters:
        - in: path
          name: teacher_id
          type: string
          required: true
          description: The ID of the teacher
        - in: body
          name: body
          schema:
            $ref: '#/definitions/Teacher'
      responses:
        200:
          description: Teacher updated successfully
        404:
          description: Teacher not found
        500:
          description: Teacher update failed
    delete:
      summary: Delete a teacher by ID
      parameters:
        - in: path
          name: teacher_id
          type: string
          required: true
          description: The ID of the teacher
      responses:
        200:
          description: Teacher deleted successfully
        404:
          description: Teacher not found or delete failed

  /menus:
    post:
      summary: Create a new menu
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/Menu'
      responses:
        201:
          description: Menu created successfully
        400:
          description: Invalid input
    get:
      summary: Get all menus
      responses:
        200:
          description: A list of menus
          schema:
            type: array
            items:
              $ref: '#/definitions/Menu'
        404:
          description: No menus found

  /menus/{menu_id}:
    get:
      summary: Get a menu by ID
      parameters:
        - in: path
          name: menu_id
          type: string
          required: true
          description: The ID of the menu
      responses:
        200:
          description: A menu
          schema:
            $ref: '#/definitions/Menu'
        404:
          description: Menu not found
    put:
      summary: Update a menu by ID
      parameters:
        - in: path
          name: menu_id
          type: string
          required: true
          description: The ID of the menu
        - in: body
          name: body
          schema:
            $ref: '#/definitions/Menu'
      responses:
        200:
          description: Menu updated successfully
        404:
          description: Menu not found
        500:
          description: Menu update failed
    delete:
      summary: Delete a menu by ID
      parameters:
        - in: path
          name: menu_id
          type: string
          required: true
          description: The ID of the menu
      responses:
        200:
          description: Menu deleted successfully
        404:
          description: Menu not found or delete failed

  /submenus:
    post:
      summary: Create a new submenu
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/Submenu'
      responses:
        201:
          description: Submenu created successfully
        400:
          description: Invalid input
    get:
      summary: Get all submenus
      responses:
        200:
          description: A list of submenus
          schema:
            type: array
            items:
              $ref: '#/definitions/Submenu'
        404:
          description: No submenus found

  /submenus/{submenu_id}:
    get:
      summary: Get a submenu by ID
      parameters:
        - in: path
          name: submenu_id
          type: string
          required: true
          description: The ID of the submenu
      responses:
        200:
          description: A submenu
          schema:
            $ref: '#/definitions/Submenu'
        404:
          description: Submenu not found
    put:
      summary: Update a submenu by ID
      parameters:
        - in: path
          name: submenu_id
          type: string
          required: true
          description: The ID of the submenu
        - in: body
          name: body
          schema:
            $ref: '#/definitions/Submenu'
      responses:
        200:
          description: Submenu updated successfully
        404:
          description: Submenu not found
        500:
          description: Submenu update failed
    delete:
      summary: Delete a submenu by ID
      parameters:
        - in: path
          name: submenu_id
          type: string
          required: true
          description: The ID of the submenu
      responses:
        200:
          description: Submenu deleted successfully
        404:
          description: Submenu not found or delete failed

# Model Details
definitions:
  User:
    type: object
    properties:
      firstName:
        type: string
        example: John
      lastName:
        type: string
        example: Doe
      mobile:
        type: string
        example: '234567890'
      email:
        type: string
        example: john.doe@example.com
      password:
        type: string
        example: password123
      userType:
        type: string
        example: admin
      IsActive:
        type: integer
        example: 1

  Teacher:
    type: object
    properties:
      name:
        type: string
        example: Nashid Martines
      age:
        type: integer
        example: 40
      gender:
        type: string
        example: Male
      img:
        type: string
        example: assets/images/our-team/pic1.jpg
      position:
        type: string
        example: Principal
      isActive:
        type: integer
        example: 1
      about:
        type: string
        example: Expert in Mathematics
      experience:
        type: string
        example: 15 years
      subject:
        type: string
        example: Chemistry Teacher
      duty:
        type: string
        example: The duties of a chemistry teacher include creating lesson plans; preparing and delivering lectures; creating and supervising laboratory activities for students; evaluating student performance; maintaining classroom records; meeting with parents, teachers, and other professionals; and participating in campus events.

  Menu:
    type: object
    properties:
      title:
        type: string
        example: About Us
      menuClass:
        type: string
        example: main-menu
      isActive:
        type: integer
        example: 1
      userId:
        type: string
        example: 6693c7b58b3d3bde81ec497a
      orderBy:
        type: integer
        example: 1

  Submenu:
    type: object
    properties:
      menuId:
        type: string
        example: 6693cf46d4cc6ec3aa693cb9
      title:
        type: string
        example: About Sunrise
      route:
        type: string
        example: /about-sunrise
      subMenuClass:
        type: string
        example: sub-menu
      isActive:
        type: integer
        example: 1
      userId:
        type: string
        example: 6693c7b58b3d3bde81ec497a

  Product:
    type: object
    properties:
      img:
        type: string
        example: https://images.unsplash.com/photo-1721403715005-cd5df8ab90ee?w=800&auto=format&fit=crop&q=60&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxmZWF0dXJlZC1waG90b3MtZmVlZHwzNHx8fGVufDB8fHx8fA%3D%3D
      Title:
        type: string
        example: School Bag
      price:
        type: string
        example: $10
      priceDiscount:
        type: string
        example: $5
      category:
        type: string
        example: Bag
      description:
        type: string
        example: A durable and spacious school bag perfect for students.

  
    type: object
    properties:
      productId:
        type: string
        example: 1557753
      currency:
        type: string
        example: $10
      stock:
        type: string
        example: 25
      availability:
        type: string
        example: in stock
      additionalImages:
        type: array
        items: []

      video:
        type: string
        formate: mp4
        example: 'assets/videos/product/item1.mp4'
      specifications:
        type: object
        properties:
          dimensions:
            type: string
            example: 40*30*15
          material:
            type: string
            example: Polyester
          weight:
            type: string
            example: 0.8kg

      features:
        type: array
        items: []

      color:
        type: string
        example: red,blue,green
      size:
        type: array
        example: ['S', 'M', 'L']
        items: []
      rating:
        type: string
        example: 4.5
      shipping_Cost:
        type: string
        example: $5
      deliveryTime:
        type: string
        example: 3-5 business days
      returnPolicy:
        type: string
        example: 30-day return policy
      vendorId:
        type: string
        example: 501
      vendorName:
        type: string
        example: Sunrise School Supplies Co.
      vendorContact:
        type: string
        example: support@schoolsupplies.com
  
  ProductDetail:
  type: object
  properties:
    productId:
      type: string
      example: "1557753"
    currency:
      type: string
      example: "$10"
    stock:
      type: string
      example: "25"
    availability:
      type: string
      example: "in stock"
    additionalImages:
      type: array
      items:
        type: string
    video:
      type: string
      format: "mp4"
      example: "assets/videos/product/item1.mp4"
    specifications:
      type: object
      properties:
        dimensions:
          type: string
          example: "40*30*15"
        material:
          type: string
          example: "Polyester"
        weight:
          type: string
          example: "0.8kg"
    features:
      type: array
      items:
        type: string
    color:
      type: string
      example: "red,blue,green"
    size:
      type: array
      items:
        type: string
      example: ["S", "M", "L"]
    rating:
      type: string
      example: "4.5"
    shipping_Cost:
      type: string
      example: "$5"
    deliveryTime:
      type: string
      example: "3-5 business days"
    returnPolicy:
      type: string
      example: "30-day return policy"
    vendorId:
      type: string
      example: "501"
    vendorName:
      type: string
      example: "Sunrise School Supplies Co."
    vendorContact:
      type: string
      example: "support@schoolsupplies.com"
